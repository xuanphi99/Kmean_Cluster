for(i in 1:10)
{
indexes=which(folds==i,arr.ind=TRUE)
testdata=edata[indexes,]
traindata=edata[-indexes,]
tempd=traindata$temp
energy1=traindata$energy
temp2=tempd*tempd
temp3=tempd*tempd*tempd
m1=lm(energy1~tempd+temp2+temp3)
t=testdata$temp
t2=t*t
t3=t*t*t
new= data.frame (t=c(10), t2=c(100), t3=c(1000))
predict(m1,new,se.fit=T,interval="prediction",level=0.95)
}
predict(m1,new,se.fit=T,interval="prediction",level=0.95)
predict(fullm,new,se.fit=T,interval="prediction")
new= data.frame (tempd=c(10), tempd2=c(100), tempd3=c(1000))
predict(m1,new,se.fit=T,interval="prediction",level=0.95)
new= data.frame (tempd=c(10), tempd2=c(100), tempd3=c(1000))
new= data.frame (tempd=c(10), tempd2=c(100), tempd3=c(1000))
predict(fullm,new,se.fit=T,interval="prediction",level=0.95)
new= data.frame (temp=c(10), tempd2=c(100), tempd3=c(1000))
predict(fullm,new,se.fit=T,interval="prediction",level=0.95)
influence.measures(fullm)
nrow(energydata)
4/24
distance=cooks.distance(fullm)
dis1=round(distance,5)
sort(dis1)
getwd()
ls
ls()
mileagedata = read.table("mileage.txt", header=T)
mileagedata
mileagedata=mileagedata[sample(nrow(mileagedata)),]
select.data=sample(1:nrow(mileagedata),0.8*nrow(mileagedata
))
select.data
select.data=sample(1:nrow(mileagedata),0.8*nrow(mileagedata))
select.data
train.data=mileagedata[select.data]
train.data=mileagedata[select.data,]
test.data=mileagedata[-select.data,]
test.data
train.data
test.data
makemodel=train.data$MAKEMODEL
hp=train.data$HP
mpg=train.data$MPG
wt=train.data$WT
wt
mpg
hp
makemodel
plot(train.data)
cor(cbind(makemodel,hp,mpg,wt))
model1=lm(mpg~hp+wt)
summary(model1)
base=lm(mpg~hp)
step(base, scope=list(upper=model1,lower=~1), direction = "both", trace=F)
summary(model1)
model2=lm(formula = mpg ~ wt)
summary(model2)
y1=predict.glm(model1,test.data)
y1
y2=predict.glm(model2,test.data)
model2
y2
y=test.data[,3]
rmse1=sqrt((y-y1)%*%(y-y1))/nrow(test.data)
rmse1
rmse1=sqrt((y-y2)%*%(y-y2))/nrow(test.data)
rmse2
rmse2=sqrt((y-y2)%*%(y-y2))/nrow(test.data)
rmse1=sqrt((y-y1)%*%(y-y1))/nrow(test.data)
rmse1
rmse2
res1 = rstandard(model2)
fit= fitted(model2)
plot(fit,res,main="Predicted vs Residuals Plot")
plot(fit,res1,main="Predicted vs Residuals Plot")
abline(a=0,b=0,col='red')
train.data
mileagedata = read.table("mileage.txt", header=T)
mileagedata=mileagedata[sample(nrow(mileagedata)),]
select.data=sample(1:nrow(mileagedata),0.8*nrow(mileagedata))
select.data
train.data=mileagedata[select.data]
train.data=mileagedata[select.data,]
test.data=mileagedata[-select.data,]
test.data
train.data
hp=train.data$HP
mpg=train.data$MPG
wt=train.data$WT
plot(train.data)
plot(train.data)
model1=lm(mpg~hp+wt)
summary(model1)
plot(fitted(fit),rstandard(fit),main="Predicted vs Residuals Plot")
plot(fitted(model1),rstandard(model1),main="Predicted vs Residuals Plot")
train.data
plot(fitted(model1),rstandard(model1),main="Predicted vs Residuals Plot")
test.data
train.data
mpg
wt
hp
summary(model1)
plot(fitted(model1),rstandard(model1),main="Predicted vs Residuals Plot")
plot(fitted(model1),rstandard(model1),main="Predicted vs Residuals Plot")
abline(a=0,b=0,col='red')
plot(hp,rstandard(model1),main="hp vs Residuals plot")
abline(a=0,b=0,col='red')
plot(wt,rstandard(model1),main="hp vs Residuals plot")
abline(a=0,b=0,col='red')
plot(wt,rstandard(model1),main="wt vs Residuals plot")
abline(a=0,b=0,col='red')
qqnorm(rstandard(model1))
qqline(rstandard(model1),col=2)
mpg_log=log(mpg)
mpg_sqrt=sqrt(mpg)
mpg_t=1/mpg
m1=lm(mpg_log,)
model2
model2=lm(log(mpg)~hp+wt)
summary(model2)
fit=fitted(model2)
res=rstandard(model2)
plot(hp,res,main="HP vs Residuals Plot")
abline(a=0,b=0,col='red')
plot(wt,res,main="WT vs Residuals Plot")
abline(a=0,b=0,col='red')
qqnorm(rstandard(model2))
qqline(rstandard(model2),col=2)
base=lm(log(mpg)~hp)
model2
step(base,scope=list(upper=model2,lower=~1),direction="both",trace=F)
getwd()
hw7data=read.table("HW7_clerical.txt",header='T')
hw7data=read.table("HW7_clerical.txt",header=T)
hw7data
hours=hw7data$hours
mail=hw7data$mail
cert=hw7data$cert
acc=hw7data
acc=hwdata$acc
change=hw7data$change
check=hw7data$check
acc=hw7data$acc
misc=hw7data$misc
tickets=hw7data$tickets
hours
day=hw7data$day
day
as.factor(day)
is.factor(day)
factor(day)
weekday=(day=="weekday")*1;
factor(day)
as.factor(day)
help(glm)
weekday
nrow(weekday)
length(weekday)
hours=hw7data$hours
mail=hw7data$mail
cert=hw7data$cert
change=hw7data$change
check=hw7data$check
acc=hw7data$acc
misc=hw7data$misc
tickets=hw7data$tickets
day=hw7data$day
weekday=(day=="weekday")*1;
fit=glm(day~hours+mail+cert+acc+change+check+misc+tickets, data=hw7data, family=bionomial())
fit=glm(day~hours+mail+cert+acc+change+check+misc+tickets, data=hw7data, family=binomial())
summary(fit)
fit=glm(weekday~hours+mail+cert+acc+change+check+misc+tickets, data=hw7data, family=binomial())
summary(fit)
summary(fit)
hw7data=read.table("HW7_clerical.txt",header=T)
hours=hw7data$hours
mail=hw7data$mail
cert=hw7data$cert
acc=hw7data
acc=hwdata$acc
change=hw7data$change
check=hw7data$check
acc=hw7data$acc
misc=hw7data$misc
tickets=hw7data$tickets
day=hw7data$day
hours=hw7data$hours
mail=hw7data$mail
cert=hw7data$cert
change=hw7data$change
check=hw7data$check
acc=hw7data$acc
misc=hw7data$misc
tickets=hw7data$tickets
day=hw7data$day
fit=glm(day~hours+mail+cert+acc+change+check+misc+tickets, data=hw7data, family=binomial())
summary(fit)
fit=glm(day~., data=hw7data, family=binomial())
summary(fit)
base=glm(day~hours, data=hw7data, family=binomial())
summary(base)
step(base, scope=list(upper=fit,lower=~1), direction="both", trace=FALSE)
step(base, scope=list(upper=fit,lower=~1), direction="forward", trace=FALSE)
model_forward=glm(formula = day ~ hours + tickets + acc + misc + cert + mail, family = binomial(), data = hw7data)
summary(model_forward)
step(base, scope=list(upper=fit,lower=~1), direction="backward", trace=FALSE)
fit
summary(fit)
summary(base)
step(base, scope=list(upper=fit,lower=~1), direction="backward", trace=FALSE)
step(base, scope=list(upper=fit,lower=~1), direction="backward", trace=FALSE)
step(fit, scope=list(upper=fit,lower=~1), direction="backward", trace=FALSE)
model_backward=glm(formula = day ~ mail + cert + acc + misc + tickets, family = binomial(),
data = hw7data)
summary(model_backward)
1-logLik(model_forward)/logLik(nullmod)
nullmod= glm(day~1, family="binomial")
1-logLik(model_forward)/logLik(nullmod)
nullmod= glm(day~1, family="binomial")
1-logLik(model_backward)/logLik(nullmod)
summary(model_forward)
coef(model_forward)
exp(coef(model_forward))
influence.measures(model_forward)
mydis=cooks.distance(model_forward)
round(mydis,5)
sort(round(mydis,5))
x = [15, 12, 8, 8, 7, 7, 7, 6 ,5, 3]
y = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]
print(cor(x,y))
x = 15, 12, 8, 8, 7, 7, 7, 6 ,5, 3
x = {15, 12, 8, 8, 7, 7, 7, 6 ,5, 3}
x = c(15, 12, 8, 8, 7, 7, 7, 6 ,5, 3)
y = c(10, 25, 17, 11, 13, 17, 20, 13, 9, 15)
cor(X,y)
cor(x,y)
x1 = cor(x,y)
x1
getwd()
library(fseries)
library(fSeries)
install.packages("fSeries")
library(tSeries)
install.packages("tSeries")
install.packages("tseries")
library(tseries)
library(fBasics)
mydata = read.table('cpius11.csv', header=T, sep=', ')
mydata = read.table('cpius11.csv', header=T, sep=',')
head(mydata)
rate = mydata$inflation
ratets = zoo(rate, as.Date(as.character(mydata$date),format =
"%m/%d/%Y"))
library(zoo)
ratets = zoo(rate, as.Date(as.character(mydata$date),format ="%m/%d/%Y"))
basicStats(ratets)
head(mydata)
start(ratets)
end(ratets)
rt = log(mydata[,3]+1)
rt
rt = log(rate+1)
rt
start(ratets)
end(ratets)
rts = log(ratets+1)
rts
hist(rts, xlab="Inflation Log returns", prob=TRUE, main="Histogram")
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="green", lwd=2)
hist(rts, xlab="Inflation Log returns", prob=TRUE, main="Histogram")
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="red", lwd=2)
cls
hist(rts, xlab="Inflation Log returns", prob=TRUE, main="Histogram")
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="red", lwd=2)
qqnorm(rt)
qqline(rt,col=2)
qqline(rt,col=3)
qqline(rt,col=4)
qqnorm(rt)
qqline(rt,col=5)
qqline(rt,col=6)
qqline(rt,col=7)
qqline(rt,col=10)
qqline(rt,col=11)
qqline(rt,col=10)
qqnorm(rt)
qqline(rt,col=6)
hist(rate)
basicStats(rt)
basicStats(rts)
jarque.bera.test(rt)
shapiro.test(rt)
plot(rts, ylab="Log returns", main="Plot of Inflation log returns vs time")
plot(rts, ylab="Log returns", main="Plot of Inflation log returns vs time", xlab=Time)
plot(rts, ylab="Log returns", main="Plot of Inflation log returns vs time", xlab="Time")
plot(rt, ylab="Log returns", main="Plot of Inflation log returns vs time", xlab="Time")
plot(rts, ylab="Log returns", main="Plot of Inflation log returns vs time", xlab="Time")
plot(rts, ylab="Log returns", main="Plot of Inflation log returns vs time", xlab="Time", col="red")
acf(rt, plot=F, lag.max=15, na.action=na.pass)
acf(rt, plot=T, lag.max=15, na.action=na.pass)
Box.test(rt,lag=6,type='Ljung')
Box.test(rt,lag=12,type='Ljung')
Box.test(rt,lag=18,type='Ljung')
ratechg= diff(ratets)
ratechg
plot(ratechg)
plot(ratechg, main="Plot of Inflation with differencing applied vs time", xlab="Time")
plot(ratechg, main="Plot of Inflation with differencing applied vs time", xlab="Time", col="red")
acf_value=acf(coredata(ratechg), plot=F, lag=15)
acf(coredata(ratechg), plot=T, lag=15)
plot(ratechg, main="Plot of Inflation with differencing applied vs time", xlab="Time", col="red")
acf(coredata(ratechg), plot=T, lag=15)
acf_value=acf(coredata(ratechg), plot=F, lag=15)
acf_value
pacf(coredata(ratechg), lag = 15)
library(tseries)
library(fBasics)
mydata = read.table('cpius11.csv', header=T, sep=',')
rate = mydata$inflation
library(zoo)
ratets = ts(rate, start=c(1991,1), freq=12)
ratechg= diff(ratets)
ratechg
basicStats(ratechg)
hist(ratechg, xlab="Time", prob=TRUE, main="Histogram")
hist(ratechg, xlab="ratechg", prob=TRUE, main="Histogram")
xfit<-seq(min(ratechg),max(ratechg),length=40)
xfit
yfit<-dnorm(xfit,mean=mean(ratechg),sd=sd(ratechg))
yfit
lines(xfit, yfit, col="red", lwd=2)
qqnorm(ratechg)
qqline(coredata(ratechg), col = 2)
normalTest(ratechg,method=c("jb"))
plot(ratechg)
plot(ratechg, col = "red")
acf_value=acf(coredata(ratechg), plot=F, lag=15)
acf(coredata(ratechg), plot=T, lag=15)
pacf(coredata(ratechg), lag = 15)
Box.test(coredata(ratechg),lag=6,type='Ljung')
Box.test(coredata(ratechg),lag=12,type='Ljung')
Box.test(coredata(ratechg),lag=18,type='Ljung')
model=arima(ratechg, c(2,0,0))
model
model_AR=arima(ratechg, c(2,0,0))
model_AR
acf_value=acf(coredata(ratechg), plot=F, lag=15)
acf(coredata(ratechg), plot=T, lag=15)
acf_value
model_MA=arima(ratechg, order = c(0,0,1))
model_MA
getwd()
source(EACF.R)
source("EACF.R")
drate = diff(rate)
ratechg= diff(ratets)
plot(ratets)
plot(ratechg)
source("EACF.R")
drate = diff(rate)
ratechg= diff(ratets)
#prints acfto console
acf(drate, plot=F, lag=20)
# creates 2 by 1 display for 2 plots
par(mfcol=c(2,1))
#plots acf(correlogram)
acf(drate, plot=T, lag=20)
# plots pacfvalues up to lag 15.
pacf(drate, lag = 15)
# Ljung Box test up to Lag 6
Box.test(drate,lag=6,type='Ljung')
# Ljung Box test up to Lag 12
Box.test(drate,lag=12,type='Ljung')
EACF(drate)
model_ARMA = arima(drate, order=c(1,0,2), method='ML', include.mean=T )
model_ARMA
library(forecast)
install.packages("forecast")
library(forecast)
auto.arima(drate, max.P=8, max.Q=8, ic="aic")
auto.arima(drate, max.P=8, max.Q=8, ic="bic")
auto.arima(coredata(ratets))
shiny::runApp('E:/Udemy_Machine_learning/Classification/Classification_App')
runApp('E:/Udemy_Machine_learning/Classification/Classification_App')
runApp('E:/Udemy_Machine_learning/Classification/Classification_models')
shiny::runApp('E:/Udemy_Machine_learning/Classification/Classification_App')
rsconnect::setAccountInfo(name='shephalikashekhar',
token='09189DBD77954F7B24C1716FDCBB07DD',
secret='AWYohj9gDa9dmkYY76WmmFm+6FkIKo0CN7k5jWaH')
library(rsconnect)
runApp('E:/Udemy_Machine_learning/Classification/Classification_App')
rsconnect::deployApp('E:/Udemy_Machine_learning/Classification/Classification_App')
library(rsconnect)
runApp('E:/Udemy_Machine_learning/Classification/Classification_App')
rsconnect::deployApp('E:/Udemy_Machine_learning/Classification/Classification_App')
rsconnect::setAccountInfo(name='shephalikashekhar',
token='09189DBD77954F7B24C1716FDCBB07DD',
secret='AWYohj9gDa9dmkYY76WmmFm+6FkIKo0CN7k5jWaH')
library(rsconnect)
rsconnect::deployApp('E:/Udemy_Machine_learning/Classification/Classification_App')
library(jsonlite)
library(htte)
library(httr)
data1 <- fromJSON("https://api.github.com/users/hadley/orgs")
names(data1)
head(data1)
data1$login
type(data1)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
0
exit
exit()
dataset = read.csv('Iris.csv')
dataset = dataset[:-4]
setwd("C:/Users/Shephalika/workspace/K_Means_Implementation")
dataset = dataset[:-4]
dataset = read.csv('Iris.csv')
dataset = dataset[-5]
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(29)
kmeans = kmeans(x = dataset, centers = 5)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE)
set.seed(29)
kmeans = kmeans(x = dataset, centers = 3)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE)
set.seed(29)
kmeans = kmeans(x = dataset, centers = 3)
y_kmeans = kmeans$cluster
kmeans = kmeans(x = dataset, centers = 4)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE)
kmeans = kmeans(x = dataset, centers = 5)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE)
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
